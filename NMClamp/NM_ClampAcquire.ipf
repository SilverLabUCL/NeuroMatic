#pragma rtGlobals=3		// Use modern global access method and strict wave access.#pragma hide = 1//****************************************************************//****************************************************************////	NeuroMatic: data aquisition, analyses and simulation software that runs with the Igor Pro environment//	Copyright (C) 2017 Jason Rothman////    This program is free software: you can redistribute it and/or modify//    it under the terms of the GNU General Public License as published by//    the Free Software Foundation, either version 3 of the License, or//    (at your option) any later version.////    This program is distributed in the hope that it will be useful,//    but WITHOUT ANY WARRANTY; without even the implied warranty of//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//    GNU General Public License for more details.////    You should have received a copy of the GNU General Public License//    along with this program.  If not, see <https://www.gnu.org/licenses/>.////	Contact Jason@ThinkRandom.com//	www.NeuroMatic.ThinkRandom.com////****************************************************************//****************************************************************////	NeuroMatic Clamp tab for data acquisition////	Created in the Laboratory of Dr. Angus Silver//	NPP Department, UCL, London////	This work was supported by the Medical Research Council//	"Grid Enabled Modeling Tools and Databases for NeuroInformatics"////	Began 1 July 2003////****************************************************************//****************************************************************Function ClampAcquireCall( mode )	Variable mode // ( 0 ) preview ( 1 ) record 		String cdf = NMClampDF	Variable error		SetNMvar( cdf + "PreviewOrRecord", mode )		if ( NumVarOrDefault( cdf+"AcquisitionBeep", 1 ) == 1 )		Beep	endif		//NMProgressCall( 0, "Starting Acquisition..." )	//NMProgWin61( 0, "Starting Acquisition..." )		String aboard = StrVarOrDefault( cdf+"BoardSelect", "" )		if ( NumVarOrDefault( cdf+"DemoMode", 1 ) == 1 )		aboard = "Demo"	endif		if ( NMStimChainOn( "" ) == 1 )		error = ClampAcquireChain( aboard, mode )	else		error = ClampAcquire( aboard, mode )	endif		if ( error < 0 )		ClampAutoBackupNM_Start()	endif		return error	End // ClampAcquireCall//****************************************************************//****************************************************************//****************************************************************Function ClampAcquire( board, mode )	String board	Variable mode // ( 0 ) preview ( 1 ) record		Variable error	String prefixFolder, wavePrefix	String cdf = NMClampDF, sdf = StimDF(), ldf = LogDF()		Variable saveWhen = NumVarOrDefault( cdf+"SaveWhen", 0 )	Variable AcqMode = NumVarOrDefault( sdf+"AcqMode", 0 )	String path = StrVarOrDefault( cdf+"ClampPath", "" )	String stimWavePrefix = StrVarOrDefault( sdf + "WavePrefix", "Record" )		Variable continuous = ( acqMode == 1 ) || ( acqMode == 4 )		NMProgressCancel( reset = 1 )	ClampError( 0, "" )		ClampDataFolderSaveCheckAll() // make sure older data files have been saved		if ( strlen( path ) == 0 )		if ( strlen( ClampPathSet( "" ) ) == 0 )			ClampError( 1, "Please specify " + NMQuotes( "save to" ) + " path on Clamp File tab." )			return -1		endif	endif		ClampAcquireCleanup() // kill previously made Clamp waves/variables in existing data folder		//if ( WinType( NMNotesTableName ) == 2 )		//NMNotesTable2Vars() // update note values	//endif		ClampSaveSubPath()		LogCheckFolder( ldf ) // check Log folder is OK		if ( ClampConfigCheck() == -1 )		ClampError( 1, "ClampConfigCheck" )		return -1	endif		if ( ( continuous == 1 ) && ( saveWhen == 2 ) && ( mode == 1 ) )		ClampError( 1, "Save While Recording is not allowed with continuous acquisition." )		return -1	endif		StimWavesCheck( "", 0 )	//ClampPNcheckwaves() // update P \ N subtraction waves		if ( ClampDataFolderCheck() == -1 )		ClampError( 1, "ClampDataFolderCheck" )		return -1	endif		if ( ( mode == 1 ) && ( ClampSaveTest( GetDataFolder( 0 ) ) == -1 ) )		ClampError( 1, "Folder name conflicts with previously saved data: " + GetDataFolder( 0 ) )		return -1	endif		NMStimBoardConfigsUpdateAll( "" )		// no longer test timers	//if ( NumVarOrDefault( cdf+"TestTimers", 1 ) == 1 )	//if ( ClampAcquireManager( AcqBoard, -1, 0 ) == -1 ) // test timers	//	return -1 	//endif	//endif		prefixFolder = CurrentNMPrefixFolder()		wavePrefix = StrVarOrDefault( "WavePrefix", "" )		if ( ( strlen( wavePrefix ) == 0 ) || !StringMatch( wavePrefix, stimWavePrefix ) || ( strlen( prefixFolder ) == 0 ) )			wavePrefix = NMStimWavePrefix("")				Make /O/N=1 $wavePrefix + "A0" // create dummy wave				NMSet( wavePrefixNoPrompt = wavePrefix ) // create prefix subfolder		endif		KillWaves /Z Groups // possibly created by macros such as RandomOrder		ClampStatsInit()	ClampSpikeInit()	if ( ( mode == 1 ) && ( ClampSaveBegin() == -1 ) )			if ( strlen( prefixFolder ) > 0 )			SetNMvar( prefixFolder+"NumWaves", 0 )		endif		ClampError( 1, "ClampSaveBegin" )				return -1			endif		if ( NMMultiClampTelegraphsConfig( sdf ) != 0 )		return -1	endif		DoUpdate		error = ClampAcquireManager( board, mode, saveWhen )		if ( ( error == -1 ) || ( NumVarOrDefault( cdf+"ClampError", -1 ) == -1 ) )				if ( strlen( prefixFolder ) > 0 )			SetNMvar( prefixFolder+"NumWaves", 0 )		endif				//ClampError( 1, "ClampAcquireManager" )				return -1			endif		DoWindow /F $NMPanelName		return 0	End // ClampAcquire//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireStart( mode, nwaves ) // update folders and graphs, start timers	Variable mode // ( 0 ) preview ( 1 ) record	Variable nwaves		Variable actualGrp		String cdf = NMClampDF	String gtitle = "Clamp Acquire"	String wPrefix = StrVarOrDefault( "WavePrefix", NMStrGet( "WavePrefix" ) )	String currentStim = StimCurrent()	String prefixFolder = CurrentNMPrefixFolder()	String psList = NMNotesProgressButtonList( removePrefix = 1 )	ClampDataFolderUpdate( nwaves, mode )	ClampGraphsUpdate( mode )	UpdateNMPanel( 0 )	ClampButtonDisable( mode )		ClampStatsStart()	ClampSpikeStart()		//ClampPNinit()		if ( mode >= 0 )			ClampFxnExecute( "Before", 2 ) // init functions		ClampFxnExecute( "During", 2 )		ClampFxnExecute( "After", 2 )				ClampFxnExecute( "Before", 0 ) // compute pre-stim functions			endif		if ( NumVarOrDefault( cdf+"ClampError", -1 ) == -1 )		return -1	endif		NMClampNotesUpdate()		actualGrp = ClampAcquireGroup( 0 ) // added to allow RandomOrder to shuffle DACs		if ( strlen( prefixFolder ) > 0 )		SetNMvar( prefixFolder+"CurrentChan", 0 )		SetNMvar( prefixFolder+"CurrentWave", 0 )		SetNMvar( prefixFolder+"CurrentGrp", actualGrp )		SetNMvar( prefixFolder+"NumWaves", 0 )		SetNMstr( prefixFolder+"WaveSelect", "All" )	endif		SetNMvar( NMDF+"NumActiveWaves", 0 )	SetNMvar( NMDF+"CurrentWave", 0 )	SetNMvar( NMDF+"CurrentGrp", actualGrp )	SetNMstr( NMDF+"CurrentGrpStr", NMGroupsStr( actualGrp ) )		SetNMvar( cdf+"CurrentGrp", 0 ) // main group counter starts from 0		//NMProgressCall( 0, "Starting Acquisition..." ) // moved earlier	NMProgWin61( 0, "Starting Acquisition...", buttonNameList = psList, buttonFxn="NMNotesProgressPopup" )		DoUpdate		Variable tref = stopMSTimer( 0 )		SetNMvar( cdf+"TimerRef", startMSTimer )		return 0End // ClampAcquireStart//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireNext( mode, nwaves ) // increment counters, online analyses	Variable mode // ( 0 ) preview ( 1 ) record	Variable nwaves		Variable tstamp, tintvl, ccnt, chan, actualGrp		String cdf = NMClampDF, sdf = StimDF()		String prefixFolder = CurrentNMPrefixFolder()		if ( strlen( prefixFolder ) == 0 )		return -1	endif		Variable numChannels = NumVarOrDefault( prefixFolder+"NumChannels", 0 )	Variable currentWave = NumVarOrDefault( prefixFolder+"CurrentWave", 0 )	Variable currentGrp = NumVarOrDefault( cdf+"CurrentGrp", 0 ) // main group counter		Variable numGroups = NumVarOrDefault( sdf+"NumStimWaves", 1 )		Wave CT_TimeStamp, CT_TimeIntvl		Variable tref = NumVarOrDefault( cdf+"TimerRef", 0 )		String gtitle = StrVarOrDefault( cdf+"ChanTitle", "Clamp Acquire" )	String gName = ChanGraphName( 0 )	String ptext = "Acquiring Data Wave # " + num2istr( currentWave )		//cancel = NMProgressCall( ( currentWave + 1 ) / nwaves, "Acquiring Data Wave # " + num2istr( currentWave ) )	NMProgWin61( ( currentWave + 1 ) / nwaves, ptext )		if ( WinType( gName ) == 1 )		gtitle = NMFolderListName( "" ) + " : Ch A : " + num2istr( currentWave )		DoWindow /T $gName, gtitle	endif		for ( ccnt = 0; ccnt < NumChannels; ccnt += 1 )		if ( NumVarOrDefault( ChanDF( ccnt )+"AutoScale", 1 ) == 0 )			ChanGraphAxesSet( ccnt )		endif	endfor		ClampStatsCompute( mode, currentWave, nwaves )	ClampSpikeCompute( mode, currentWave, nwaves )		if ( mode >= 0 )		ClampFxnExecute( "During", 0 )	endif		tintvl = stopMSTimer( tref )/1000	tref = startMSTimer	tstamp = tintvl		SetNMvar( cdf+"TimerRef", tref )		if ( ( currentWave >= 0 ) && ( currentWave < numpnts( CT_TimeStamp ) ) && ( currentWave < numpnts( CT_TimeIntvl ) ) )			if ( currentWave == 0 )			tintvl = Nan		else			tstamp += CT_TimeStamp[currentWave-1]		endif				CT_TimeStamp[currentWave] = tstamp		CT_TimeIntvl[currentWave] = tintvl		endif		//actualGrp = ClampAcquireGroup( currentGrp ) // added to allow RandomOrder to shuffle DACs		//SetNMvar( NMDF+"CurrentWave", currentWave )	//SetNMvar( NMDF+"CurrentGrp", actualGrp )	//SetNMstr( NMDF+"CurrentGrpStr", NMGroupsStr( actualGrp ) )		currentWave += 1	currentGrp += 1		if ( currentGrp >= numGroups )		currentGrp = 0	endif		if ( currentWave < nwaves )			actualGrp = ClampAcquireGroup( currentGrp ) // added to allow RandomOrder to shuffle DACs				SetNMvar( NMDF+"CurrentWave", currentWave )		SetNMvar( NMDF+"CurrentGrp", actualGrp )		SetNMstr( NMDF+"CurrentGrpStr", NMGroupsStr( actualGrp ) )			SetNMvar( prefixFolder+"CurrentWave", currentWave )		SetNMvar( prefixFolder+"CurrentGrp", actualGrp )		SetNMvar( cdf+"CurrentGrp", currentGrp )		endif		DoUpdate		return NumVarOrDefault( NMDF + "NMProgressCancel", 0 )End // ClampAcquireNext//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireFinish( mode, savewhen, background )	Variable mode // ( 0 ) preview ( 1 ) record ( -1 ) test timers ( -2 ) error	Variable savewhen // ( 0 ) never ( 1 ) after ( 2 ) while	Variable background // start background save function ( 0 ) no ( 1 ) yes		Variable nwaves, actualGrp, gcnt	String file, gList = "", cdf = NMClampDF, sdf = StimDF()		String prefixFolder = CurrentNMPrefixFolder()	String currentStim = StimCurrent()		Variable currentWave = CurrentNMWave()	Variable nchans = NMNumChannels()		Variable numGroups = NumVarOrDefault( sdf+"NumStimWaves", 0 )		SetNMstr( "FileFinish", time() )		NMProgressKill()		ClampStatsFinish( currentWave )		nwaves = currentWave + 1		if ( mode < 0 ) // test, error		nwaves = 0	elseif ( mode == 0 ) // preview		nwaves = 1	endif		actualGrp = ClampAcquireGroup( 0 ) // added to allow RandomOrder to shuffle DACs 		SetNMvar( prefixFolder+"NumWaves", nwaves )		SetNMvar( prefixFolder+"CurrentChan", 0 )	SetNMvar( prefixFolder+"CurrentWave", 0 )	SetNMvar( prefixFolder+"CurrentGrp", actualGrp )		ClampGraphsFinish()	CheckNMDataFolder( "" )	NMChanWaveListSet( 1 ) // set channel wave names	UpdateNMPanel( 0 )		//ClampTgainConvert()		//if ( DataFolderExists( CurrentStim ) ) // not needed, see ClampDataFolderUpdate // configs "SaveDACwaves" and "SaveTTLwaves"		//KillDataFolder $CurrentStim		//DuplicateDataFolder $sdf, $CurrentStim	//endif		SetNMvar( NMDF+"CurrentWave", 0 )	SetNMvar( NMDF+"CurrentGrp", 0 )	SetNMstr( NMDF+"CurrentGrpStr", "0" )	SetNMvar( NMDF+"NumActiveWaves", nchans * nwaves )		if ( ( mode == 0 ) || ( mode == 1 ) )		NMMultiClampTelegraphSave( "" )	endif		ClampAcquireNotes()		if ( mode >= 0 )			ClampFxnExecute( "After", 0 ) // compute post-stim analyses				ClampFxnExecute( "Before", 3 ) // finilize		ClampFxnExecute( "During", 3 )		ClampFxnExecute( "After", 3 )			endif		if ( mode == 1 ) // record and update Notes and Log variables			if ( strlen( StrVarOrDefault( NMNotesDF+"H_Name", "" ) ) == 0 )			NMNotesEditHeader()		endif				NMNotesBasicUpdate()		NMNotesCopyVars( LogDF(),"H_" ) // update header Notes		NMNotesCopyToFolder( GetDataFolder( 1 )+"ClampNotes" ) // copy Notes to data folder				NMSet( wavePrefixNoPrompt = StrVarOrDefault( "WavePrefix", NMStrGet( "WavePrefix" ) ) )				NMChanSelect( "A" )		NMWaveSelect( "All" )				if ( WaveExists( $"Groups" ) == 1 )					if ( numpnts( $"Groups" ) < nwaves ) // resize, stim protocol was repeated							Wave gtemp = $"Groups"								numGroups = numpnts( gtemp )								for ( gcnt = 0 ; gcnt < numGroups ; gcnt += 1 )					gList += num2str( gtemp[ gcnt ] ) + ";"				endfor								Redimension /N=( nwaves ) gtemp								for ( gcnt = 0 ; gcnt < numGroups ; gcnt += 1 )					gtemp[gcnt,nwaves-1;numGroups] = str2num( StringFromList( gcnt, gList ) )				endfor										endif						NMGroupsWaveToLists( "Groups" )			UpdateNMGroups()					else					NMGroupsSet( numGroups = numGroups )					endif				ClampSaveFinish( "" ) // save data folder		NMNotesBasicUpdate() // do again, this includes new external file name		NMNotesCopyToFolder( LogDF()+StrVarOrDefault( cdf+"CurrentFolder","nofolder" ) ) // save log notes				if ( NumVarOrDefault( cdf+"LogAutoSave", 1 ) == 1 )			LogSave()		endif				LogDisplay2( LogDF(), NumVarOrDefault( cdf+"LogDisplay", 1 ) )				NMNotesClearFileVars() // clear file note vars before next recording			endif		NMClampNotesUpdate()		ClampButtonDisable( -1 )		ClampAvgInterval()		if ( mode == 1 )		ClampStatsCompute( mode, 0, nwaves, updateGraphs = 0 )	endif		ClampSpikeFinish( mode, 0 )		if ( background == 1 )		ClampAutoBackupNM_Start()	endif		return 0End // ClampAcquireFinish//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireChain( board, mode )	String board	Variable mode // ( 0 ) preview ( 1 ) record		Variable scnt, npnts	String sname, cdf = NMClampDF, sdf = StimDF()	if ( WaveExists( $( sdf+"Stim_Name" ) ) == 0 )		return -1	endif		String aboard = StrVarOrDefault( cdf+"AcqBoard", "" )	String saveStim = StimCurrent()		Wave /T Stim_Name = $( sdf+"Stim_Name" )	Wave Stim_Wait = $( sdf+"Stim_Wait" )		if ( numpnts( Stim_Name ) == 0 )		ClampError( 1, "Alert: no stimulus protocols in Run Stim List." )		return -1	endif		npnts = numpnts( Stim_Name )		for ( scnt = 0; scnt < npnts; scnt += 1 )			if ( NMProgressCancel() )					DoAlert 1, "Cancel remaining stimulus chain?"						if ( V_flag == 1 )				break			else				NMProgressCancel( reset = 1 )			endif					endif			sname = Stim_Name[ scnt ]				if ( strlen( sname ) == 0 )			continue		endif				if ( IsStimFolder( NMStimsDF, sname ) == 0 )			DoAlert 0, "Alert: stimulus protocol " + NMQuotes( sname ) + " does not appear to exist."			continue		endif				if ( strlen( StimCurrentSet( sname ) ) > 0 )					ClampTabUpdate()			ClampAcquire( board, mode )						if ( NMProgressCancel() )							DoAlert 1, "Cancel remaining stimulus chain?"							if ( V_flag == 1 )					break				else					NMProgressCancel( reset = 1 )				endif							endif					if ( ( scnt < numpnts( Stim_Wait ) ) && ( scnt + 1 < npnts ) && ( strlen( Stim_Name[ scnt + 1 ] ) > 0 ) )				ClampWaitProgress( Stim_Wait[scnt] ) // delay in acquisition			endif					endif			endfor		StimCurrentSet( saveStim )	ClampTabUpdate()End // ClampAcquireChain//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireNotes()	Variable ccnt, wcnt, config, scale	String wName, wNote, yl, modeStr, type = "NMData"	String sdf = StimDF(), bdf = NMStimBoardDF( sdf ), onList = NMStimBoardOnList( sdf, "ADC" )		String stim = StimCurrent()	String folder = GetDataFolder( 0 )	String fdate = StrVarOrDefault( "FileDate", "" )	String ftime = StrVarOrDefault( "FileTime", "" )	String xl = StrVarOrDefault( "xLabel", NMXunits )		String prefixFolder = CurrentNMPrefixFolder()		Variable nchans = NumVarOrDefault( prefixFolder+"NumChannels", 0 )	Variable nwaves = NumVarOrDefault( prefixFolder+"NumWaves", 0 )		wName = bdf + "ADCname"		if ( WaveExists( $wName ) == 0 )		return 0	endif		if ( WaveExists( $"CT_TimeStamp" ) == 0 )		return 0	endif		Wave /T ADCname = $bdf+"ADCname"	Wave /T ADCunits = $bdf+"ADCunits"	Wave /T ADCmode = $bdf+"ADCmode"	Wave ADCboard = $bdf+"ADCboard"	Wave ADCchan = $bdf+"ADCchan"	Wave ADCgain = $bdf+"ADCgain"	Wave ADCscale = $bdf+"ADCscale"		Wave CT_TimeStamp	Wave /T yLabel		for ( ccnt = 0; ccnt < nchans ; ccnt += 1 )			if ( ccnt >= numpnts( yLabel ) )			break		endif			yl = yLabel[ccnt]				config = -1				if ( ccnt < ItemsInList( onList ) )			config = str2num( StringFromList( ccnt, onList ) )		endif			for ( wcnt = 0; wcnt < nwaves; wcnt += 1 )					if ( wcnt >= numpnts( CT_TimeStamp ) )				break			endif				wName = GetWaveName( "default", ccnt, wcnt )						if ( WaveExists( $wName ) == 0 )				continue			endif						scale = NMNoteVarByKey( wName, "Scale Factor" ) // saved during acquisition						NMNoteType( wName, type, xl, yl, "Stim:" + stim )						Note $wName, "Folder:" + folder			Note $wName, "Date:" + NMNoteCheck( fdate )			Note $wName, "Time:" + NMNoteCheck( ftime )			Note $wName, "Time Stamp:" + num2strLong( CT_TimeStamp[ wcnt ], 3 ) + " msec"			Note $wName, "Chan:" + ChanNum2Char( ccnt )						if ( numtype( scale ) == 0 )				Note $wName, "ADCscale:" + num2str( scale )			endif						if ( ( config >= 0 ) && ( config < numpnts( ADCmode ) ) && ( config < numpnts( ADCname ) ) )							modeStr = ADCmode[ config ]								if ( strlen( modeStr ) == 0 )					modestr = "Normal"				else					Note $wName, "ADCmode:" + modeStr				endif								if ( NMMultiClampTelegraphMode( modeStr ) == 1 )									NMMultiClampWaveNotes( wName, modeStr )								else								Note $wName, "ADCname:" + ADCname[ config ]					Note $wName, "ADCunits:" + ADCunits[ config ]					Note $wName, "ADCunitsX:msec"					Note $wName, "ADCboard:" + num2istr( ADCboard[ config ] )					Note $wName, "ADCchan:" + num2istr( ADCchan[ config ] )					Note $wName, "ADCgain:" + num2str( ADCgain[ config ] )									endif							endif				endfor			endfor	End // ClampAcquireNotes//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireGroup( grpNum )	Variable grpNum	if ( ( WaveExists( $"Groups" ) == 1 ) && ( grpNum >= 0 ) && ( grpNum < numpnts( $"Groups" ) ) )				Wave Groups					return Groups[ grpNum ]		endif		return grpNumEnd // ClampAcquireGroup//****************************************************************//****************************************************************//****************************************************************Function ClampAvgInterval()	Variable rcnt, wcnt, wwe, we, wn, rre, re, rn, dr, icnt, isi	String txt, sdf = StimDF()		Variable acqMode = NumVarOrDefault( sdf + "AcqMode", -1 )	Variable WaveLength = NumVarOrDefault( sdf+"WaveLength", 0 )	Variable NumStimWaves = NumVarOrDefault( sdf+"NumStimWaves", 0 )	Variable interStimTime = NumVarOrDefault( sdf+"InterStimTime", 0 )	Variable NumStimReps = NumVarOrDefault( sdf+"NumStimReps", 0 )	Variable interRepTime = NumVarOrDefault( sdf+"InterRepTime", 0 )		if ( ( acqMode != 2 ) || ( WaveExists( $"CT_TimeIntvl" ) == 0 ) )		return 0	endif		wwe = WaveLength + interStimTime	rre = wwe + interRepTime		Wave CT_TimeIntvl		for ( rcnt = 0; rcnt < NumStimReps; rcnt += 1 ) // loop thru reps			if ( icnt >= numpnts( CT_TimeIntvl ) )			break		endif			for ( wcnt = 0; wcnt < NumStimWaves; wcnt += 1 ) // loop thru stims					if ( icnt >= numpnts( CT_TimeIntvl ) )				break			endif						//dw = WaveLength + interStimTime + dr			isi = CT_TimeIntvl[icnt]						if ( numtype( isi ) == 0 )				if ( dr == 0 ) // clock controlling inter-stim times					we += isi					wn += 1				else // clock controlling inter-rep times					re += isi					rn += 1				endif			endif						dr = 0			icnt += 1					endfor				dr = interRepTime			endfor		if ( wn > 0 )		we /= wn		Print "Average episodic wave interval:", we//, " ms; error = ", ( we - wwe ), " ms"	endif		if ( rn > 0 )		re /= rn		Print "Average episodic rep interval:", re//, " ms; error = ", ( re - rre ), " ms"	endifEnd // ClampAvgInterval//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireManager( atype, callmode, savewhen ) // call appropriate aquisition function	String atype // acqusition board ( "Demo", "ITC", "NIDAQ", "Alembic" )	Variable callmode // ( 0 ) preview ( 1 ) record ( -2 ) config test	Variable savewhen // ( 0 ) never ( 1 ) after ( 2 ) while		String cdf = NMClampDF, sdf = StimDF() 		Variable WaveLength = NumVarOrDefault( sdf+"WaveLength", 0 )	Variable NumStimWaves = NumVarOrDefault( sdf+"NumStimWaves", 0 )	Variable interStimTime = NumVarOrDefault( sdf+"InterStimTime", 0 )	Variable NumStimReps = NumVarOrDefault( sdf+"NumStimReps", 0 )	Variable interRepTime = NumVarOrDefault( sdf+"InterRepTime", 0 )		String currentStim = StimCurrent()		ClampError( 0, "" )		KillBackground		switch( callmode )		case 0: // preview			SetNMstr( NMDF+"ProgressStr", "Preview : " + currentStim )			break		case 1: // record			SetNMstr( NMDF+"ProgressStr", "Record : " + currentStim )			break		default:			SetNMstr( NMDF+"ProgressStr", "" )			break	endswitch		if ( ( exists( "NM_LIH_InterfaceNameList" ) == 6 ) && ( exists( "LIH_InitInterface" ) == 3 ) )			if ( WhichListItem( atype, "ITC16;ITC18;ITC1600;LIH8p8;ITC16USB;ITC18USB;" ) >= 0 ) // see NM_LIH_InterfaceNameList			atype = "LIH"		endif		endif	strswitch( atype )			case "Demo":					switch( callmode )							case -2: // test config									Execute /Z "NMClampDemoConfig()"										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NMClampDemoConfig" )						return -1					endif										break									case 0: // preview				case 1: // record										Execute /Z "NMClampDemoAcquire" + ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NMClampDemoAcquire" )						return -1					endif										break									default:					ClampError( 1, "demo acquire mode " + num2istr( callmode ) + " not supported." )					return -1								endswitch						break				case "NIDAQ":						switch( callmode )							case -2: // config									//SetNMvar( cdf+"BoardDriver", -1 )										Execute /Z "NIDAQconfig()"										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NIDAQconfig" )						return -1					endif										break									case 0: // preview				case 1: // record									Execute /Z "NIDAQacquire" + ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NIDAQacquire" )						return -1					endif										break									default:									ClampError( 1, "NIDAQ acquire mode " + num2istr( callmode ) + " not supported." )										return -1								endswitch						break					case "ITC16":		case "ITC18":					switch( callmode )							case -2: // config									Execute /Z "ITCconfig( " + NMQuotes( atype ) + " )"										if ( V_flag != 0 )						ClampError( 1, "failed to execute function ITCconfig" )						return -1					endif										break									case 0: // preview				case 1: // record									Execute /Z "ITCacquire" + ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )										if ( V_flag != 0 )						ClampError( 1, "failed to execute function ITCacquire" )						return -1					endif										break									default:									ClampError( 1, "ITC acquire mode " + num2istr( callmode ) + " not supported" )										return -1								endswitch						break					case "LIH":					switch( callmode )							case -2: // config									Execute /Z "NM_LIH_Config()"										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NM_LIH_Config" )						return -1					endif										break									case 0: // preview				case 1: // record									Execute /Z "NM_LIH_Acquire" + ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NM_LIH_Acquire" )						return -1					endif										break									default:									ClampError( 1, "ITC acquire mode " + num2istr( callmode ) + " not supported" )										return -1								endswitch						break					case "Alembic":					switch( callmode )							case -2: // config									Execute /Z "NMAlembicConfig()"										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NMAlembicConfig" )						return -1					endif										break									case 0: // preview				case 1: // record									Execute /Z "NMAlembicAcquire" + ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )										if ( V_flag != 0 )						ClampError( 1, "failed to execute function NMAlembicAcquire" )						return -1					endif										break									default:									ClampError( 1, "ITC acquire mode " + num2istr( callmode ) + " not supported" )										return -1								endswitch					break					default:					ClampError( 1, "interface " + atype + " is not supported." )						return -1			endswitch	return NumVarOrDefault( cdf+"ClampError", -1 )End // ClampAcquireManager//****************************************************************//****************************************************************//****************************************************************Function ClampReadManager( atype, board, ADCchan, gain, npnts ) // call appropriate read function	String atype // acqusition board ( "Demo", "ITC", "NIDAQ" )	Variable board	Variable ADCchan // ADC input channel to read	Variable gain	Variable npnts // number of points to average		String cdf = NMClampDF, vlist = ""		SetNMvar( cdf+"ClampReadValue", Nan )		if ( numtype( board * ADCchan * gain * npnts ) > 0 )		return Nan	endif		strswitch( atype )			case "Demo":			return Nan				case "NIDAQ":					vlist = AddListItem( num2istr( board ), vlist, ",", inf )			vlist = AddListItem( num2istr( ADCchan ), vlist, ",", inf )			vlist = AddListItem( num2str( gain ), vlist, ",", inf )			vlist += num2istr( npnts ) 						Execute /Z "NIDAQread( " + vlist + " )"						if ( V_flag != 0 )				ClampError( 1, "cannot locate function in NM_ClampNIDAQ.ipf" )				return Nan			endif						break					case "ITC16":		case "ITC18":					vlist = AddListItem( num2istr( ADCchan ), vlist, ",", inf )			vlist = AddListItem( num2str( gain ), vlist, ",", inf )			vlist += num2istr( npnts ) 						Execute /Z "ITCread( " + vlist + " )"						if ( V_flag != 0 )				ClampError( 1, "cannot locate function in NM_ClampITC.ipf" )				return Nan			endif						break					default:			ClampError( 1, "interface " + atype + " is not supported." )			return Nan				endswitch	return NumVarOrDefault( cdf+"ClampReadValue", Nan )	End // ClampReadManager//****************************************************************//****************************************************************//****************************************************************Function /S ClampParameterList( callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime )	Variable callmode, savewhen, WaveLength, NumStimWaves, interStimTime, NumStimReps, interRepTime	String paramstr = "("+num2istr( callmode )+","+num2str( savewhen )+","+num2str( WaveLength )+","+num2istr( NumStimWaves )+","	paramstr += num2str( interStimTime )+","+num2str( NumStimReps )+","+num2str( interRepTime )+")"		return paramstrEnd // ClampParameterList//****************************************************************//****************************************************************//****************************************************************Function ClampFxnExecute( select, mode )	String select // "Before" or "During" or "After"	Variable mode // ( 0 ) preview ( 1 ) record 		Variable icnt	String flist, fxn		flist = NMStimFxnList( "", select )		for ( icnt = 0; icnt < ItemsInList( flist ); icnt += 1 )			fxn = StringFromList( icnt, flist )				if ( StringMatch( fxn[strlen( fxn )-3,strlen( fxn )-1],"(0)" ) == 0 )			fxn += "(" + num2istr( mode ) + ")" // run function		endif				Execute /Z fxn			endforEnd // ClampFxnExecute//****************************************************************//****************************************************************//****************************************************************Function ClampConfigCheck()		if ( NMStimBoardOnCount( "", "ADC" ) == 0 )		ClampError( 1, "ADC input has not been configured." )		return -1	endif		if ( NMStimBoardConfigsCheckDups( "" ) < 0 )		return -1	endif		return 0	End // ClampConfigCheck//****************************************************************//****************************************************************//****************************************************************Function ClampWavesNumpnts( DAClist, TTLlist, defaultNpnts )	String dacList, ttlList	Variable defaultNpnts		Variable icnt, npnts = defaultNpnts	String item, wname, list = DAClist		list = AddListItem( TTLlist, DAClist, ";", inf )		for ( icnt = 0; icnt < ItemsInList( list ); icnt += 1 )					item = StringFromList( icnt, list )		wname = StringFromList( 0, item, "," )		if ( WaveExists( $wname ) == 1 )			npnts = numpnts( $wname )		endif			endfor	return npntsEnd // ClampWavesNumpnts//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireCleanup()	Variable icnt	String vname, vlist = VariableList("CT_*",";",6)		for ( icnt = 0 ; icnt < ItemsInList( vlist ) ; icnt += 1 )		vname = StringFromList( icnt, vlist )		KillVariables /Z $vname	endfor		vlist = StringList("CT_*",";")	for ( icnt = 0 ; icnt < ItemsInList( vlist ) ; icnt += 1 )		vname = StringFromList( icnt, vlist )		KillStrings /Z $vname	endfor		vlist = WaveList("CT_*",";", "")		for ( icnt = 0 ; icnt < ItemsInList( vlist ) ; icnt += 1 )		vname = StringFromList( icnt, vlist )		KillWaves /Z $vname	endforEnd // ClampAcquireCleanup//****************************************************************//****************************************************************//****************************************************************Function ClampAcquireError( alertStr, errorStr )	String alertStr, errorStr		String cdf = NMClampDF		SetNMstr( cdf+"ClampErrorStr", errorStr )	SetNMvar( cdf+"ClampError", -1 )		DoUpdate		Print alertStr + " : " + errorStr	DoAlert 0, alertStr + " : " + errorStr		ClampAcquireFinish( -2, 0, 1 )		return -1End // ClampAcquireError//****************************************************************//****************************************************************//****************************************************************